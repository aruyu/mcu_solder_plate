
mcu_solder_plate.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000788  0000081c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000788  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000202  00800122  00800122  0000083e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f0  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000970  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dc  00000000  00000000  000026f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00002fd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ec  00000000  00000000  000031e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ad9  00000000  00000000  000037d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000042ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 01 	jmp	0x274	; 0x274 <__ctors_end>
   4:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
   8:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
   c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  10:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  14:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  18:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  1c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  20:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  24:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  28:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  2c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  30:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  34:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  38:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  3c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  40:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  44:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  48:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  4c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  50:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  54:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  58:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  5c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  60:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>
  64:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__bad_interrupt>

00000068 <INIT_SSD1306>:
  68:	11 ae 00 a8 01 1f 20 01 00 40 00 d3 01 00 a1 00     ...... ..@......
  78:	c8 00 da 01 02 81 01 7f a4 00 a6 00 d5 01 80 d9     ................
  88:	01 c2 db 01 20 8d 01 14 2e 00 af 00                 .... .......

00000094 <FONTS>:
  94:	00 00 00 00 00 81 81 18 81 81 00 07 00 07 00 14     ................
  a4:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  b4:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  c4:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  d4:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  e4:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  f4:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
 104:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 114:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 124:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 134:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 144:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 154:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 164:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 174:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 184:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 194:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 1a4:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 1b4:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 1c4:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1d4:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1e4:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1f4:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 204:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 214:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 224:	7c 14 14 14 08 08 14 14 14 7c 7c 08 04 04 08 48     |........||....H
 234:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 244:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 254:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 264:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000274 <__ctors_end>:
 274:	11 24       	eor	r1, r1
 276:	1f be       	out	0x3f, r1	; 63
 278:	cf ef       	ldi	r28, 0xFF	; 255
 27a:	d8 e0       	ldi	r29, 0x08	; 8
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	cd bf       	out	0x3d, r28	; 61

00000280 <__do_copy_data>:
 280:	11 e0       	ldi	r17, 0x01	; 1
 282:	a0 e0       	ldi	r26, 0x00	; 0
 284:	b1 e0       	ldi	r27, 0x01	; 1
 286:	e8 e8       	ldi	r30, 0x88	; 136
 288:	f7 e0       	ldi	r31, 0x07	; 7
 28a:	02 c0       	rjmp	.+4      	; 0x290 <__do_copy_data+0x10>
 28c:	05 90       	lpm	r0, Z+
 28e:	0d 92       	st	X+, r0
 290:	a2 32       	cpi	r26, 0x22	; 34
 292:	b1 07       	cpc	r27, r17
 294:	d9 f7       	brne	.-10     	; 0x28c <__do_copy_data+0xc>

00000296 <__do_clear_bss>:
 296:	23 e0       	ldi	r18, 0x03	; 3
 298:	a2 e2       	ldi	r26, 0x22	; 34
 29a:	b1 e0       	ldi	r27, 0x01	; 1
 29c:	01 c0       	rjmp	.+2      	; 0x2a0 <.do_clear_bss_start>

0000029e <.do_clear_bss_loop>:
 29e:	1d 92       	st	X+, r1

000002a0 <.do_clear_bss_start>:
 2a0:	a4 32       	cpi	r26, 0x24	; 36
 2a2:	b2 07       	cpc	r27, r18
 2a4:	e1 f7       	brne	.-8      	; 0x29e <.do_clear_bss_loop>
 2a6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
 2aa:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

000002ae <__bad_interrupt>:
 2ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b2 <main>:
#include "src/lib/ssd1306.h"


int main(void)
{
	SSD1306_Init (SSD1306_ADDR);                                    // 0x3C
 2b2:	8c e3       	ldi	r24, 0x3C	; 60
 2b4:	0e 94 b5 01 	call	0x36a	; 0x36a <SSD1306_Init>

	// DRAWING
	// -------------------------------------------------------------------------------------
	SSD1306_ClearScreen ();                                         // clear screen
 2b8:	0e 94 35 02 	call	0x46a	; 0x46a <SSD1306_ClearScreen>
	SSD1306_DrawLine (0, MAX_X, 4, 4);                              // draw line
 2bc:	24 e0       	ldi	r18, 0x04	; 4
 2be:	44 e0       	ldi	r20, 0x04	; 4
 2c0:	6f e7       	ldi	r22, 0x7F	; 127
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 ef 02 	call	0x5de	; 0x5de <SSD1306_DrawLine>
	SSD1306_SetPosition (7, 1);                                     // set position
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	87 e0       	ldi	r24, 0x07	; 7
 2cc:	0e 94 40 02 	call	0x480	; 0x480 <SSD1306_SetPosition>
	SSD1306_DrawString ("* MCU SOLDER PLATE *");                     // draw string
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 a7 02 	call	0x54e	; 0x54e <SSD1306_DrawString>
	SSD1306_DrawLine (0, MAX_X, 18, 18);                            // draw line
 2d8:	22 e1       	ldi	r18, 0x12	; 18
 2da:	42 e1       	ldi	r20, 0x12	; 18
 2dc:	6f e7       	ldi	r22, 0x7F	; 127
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 ef 02 	call	0x5de	; 0x5de <SSD1306_DrawLine>
	SSD1306_SetPosition (40, 3);                                    // set position
 2e4:	63 e0       	ldi	r22, 0x03	; 3
 2e6:	88 e2       	ldi	r24, 0x28	; 40
 2e8:	0e 94 40 02 	call	0x480	; 0x480 <SSD1306_SetPosition>
	SSD1306_DrawString ("LEE JIN");                                // draw string
 2ec:	85 e1       	ldi	r24, 0x15	; 21
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 a7 02 	call	0x54e	; 0x54e <SSD1306_DrawString>
	SSD1306_SetPosition (53, 5);                                    // set position
 2f4:	65 e0       	ldi	r22, 0x05	; 5
 2f6:	85 e3       	ldi	r24, 0x35	; 53
 2f8:	0e 94 40 02 	call	0x480	; 0x480 <SSD1306_SetPosition>
	SSD1306_DrawString ("2024");                                    // draw string
 2fc:	8d e1       	ldi	r24, 0x1D	; 29
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 a7 02 	call	0x54e	; 0x54e <SSD1306_DrawString>
	SSD1306_UpdateScreen (SSD1306_ADDR);                            // update
 304:	8c e3       	ldi	r24, 0x3C	; 60
 306:	0e 94 12 02 	call	0x424	; 0x424 <SSD1306_UpdateScreen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 30a:	2f ef       	ldi	r18, 0xFF	; 255
 30c:	83 ed       	ldi	r24, 0xD3	; 211
 30e:	90 e3       	ldi	r25, 0x30	; 48
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x5e>
 318:	00 c0       	rjmp	.+0      	; 0x31a <main+0x68>
 31a:	00 00       	nop
	
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms (1000);
		SSD1306_InverseScreen (SSD1306_ADDR);
 31c:	8c e3       	ldi	r24, 0x3C	; 60
 31e:	0e 94 05 02 	call	0x40a	; 0x40a <SSD1306_InverseScreen>
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	83 ed       	ldi	r24, 0xD3	; 211
 326:	90 e3       	ldi	r25, 0x30	; 48
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <main+0x76>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x80>
 332:	00 00       	nop

		_delay_ms (1000);
		SSD1306_NormalScreen (SSD1306_ADDR);
 334:	8c e3       	ldi	r24, 0x3C	; 60
 336:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <SSD1306_NormalScreen>
 33a:	e7 cf       	rjmp	.-50     	; 0x30a <main+0x58>

0000033c <SSD1306_Send_StartAndSLAW>:
 * @param   uint8_t
 *
 * @return  uint8_t
 */
uint8_t SSD1306_Send_StartAndSLAW (uint8_t address)
{
 33c:	cf 93       	push	r28
 33e:	c8 2f       	mov	r28, r24
  uint8_t status = INIT_STATUS;

  // TWI: start
  // -------------------------------------------------------------------------------------
  status = TWI_MT_Start ();
 340:	0e 94 77 03 	call	0x6ee	; 0x6ee <TWI_MT_Start>
  if (SSD1306_SUCCESS != status) {
 344:	81 11       	cpse	r24, r1
 346:	03 c0       	rjmp	.+6      	; 0x34e <SSD1306_Send_StartAndSLAW+0x12>
    return status;
  }
  // TWI: send SLAW
  // -------------------------------------------------------------------------------------
  status = TWI_MT_Send_SLAW (address);
 348:	8c 2f       	mov	r24, r28
 34a:	0e 94 95 03 	call	0x72a	; 0x72a <TWI_MT_Send_SLAW>
  if (SSD1306_SUCCESS != status) {
    return status;
  }

  return SSD1306_SUCCESS;
}
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <SSD1306_Send_Command>:
 * @param   uint8_t command
 *
 * @return  uint8_t
 */
uint8_t SSD1306_Send_Command (uint8_t command)
{
 352:	cf 93       	push	r28
 354:	c8 2f       	mov	r28, r24
  uint8_t status = INIT_STATUS;

  // send control byte
  // -------------------------------------------------------------------------------------   
  status = TWI_MT_Send_Data (SSD1306_COMMAND);
 356:	80 e8       	ldi	r24, 0x80	; 128
 358:	0e 94 aa 03 	call	0x754	; 0x754 <TWI_MT_Send_Data>
  if (SSD1306_SUCCESS != status) {
 35c:	81 11       	cpse	r24, r1
 35e:	03 c0       	rjmp	.+6      	; 0x366 <SSD1306_Send_Command+0x14>
    return status;
  }
  // send command
  // -------------------------------------------------------------------------------------   
  status = TWI_MT_Send_Data (command);
 360:	8c 2f       	mov	r24, r28
 362:	0e 94 aa 03 	call	0x754	; 0x754 <TWI_MT_Send_Data>
  if (SSD1306_SUCCESS != status) {
    return status;
  }

  return SSD1306_SUCCESS;
}
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <SSD1306_Init>:
 * @param   uint8_t address
 *
 * @return  uint8_t
 */
uint8_t SSD1306_Init (uint8_t address)
{ 
 36a:	df 92       	push	r13
 36c:	ef 92       	push	r14
 36e:	ff 92       	push	r15
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
 374:	cf 93       	push	r28
 376:	df 93       	push	r29
 378:	c8 2f       	mov	r28, r24
  const uint8_t * list = INIT_SSD1306;
  uint8_t status = INIT_STATUS;                                   // init status
  uint8_t arguments;
  uint8_t commands = pgm_read_byte (list++);
 37a:	e8 e6       	ldi	r30, 0x68	; 104
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	14 91       	lpm	r17, Z

  // TWI: Init
  // -------------------------------------------------------------------------------------
  TWI_Init ();
 380:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <TWI_Init>
  // TWI: start & SLAW
  // -------------------------------------------------------------------------------------
  status = SSD1306_Send_StartAndSLAW (address);
 384:	8c 2f       	mov	r24, r28
 386:	0e 94 9e 01 	call	0x33c	; 0x33c <SSD1306_Send_StartAndSLAW>
  if (SSD1306_SUCCESS != status) {
 38a:	81 11       	cpse	r24, r1
 38c:	29 c0       	rjmp	.+82     	; 0x3e0 <SSD1306_Init+0x76>
 38e:	c9 e6       	ldi	r28, 0x69	; 105
 390:	d0 e0       	ldi	r29, 0x00	; 0
 392:	1e c0       	rjmp	.+60     	; 0x3d0 <SSD1306_Init+0x66>
  // Commands & Arguments
  // -------------------------------------------------------------------------------------
  while (commands--) {
    // Command
    // -----------------------------------------------------------------------------------
    status = SSD1306_Send_Command (pgm_read_byte(list++));
 394:	8e 01       	movw	r16, r28
 396:	0f 5f       	subi	r16, 0xFF	; 255
 398:	1f 4f       	sbci	r17, 0xFF	; 255
 39a:	fe 01       	movw	r30, r28
 39c:	84 91       	lpm	r24, Z
 39e:	0e 94 a9 01 	call	0x352	; 0x352 <SSD1306_Send_Command>
    if (SSD1306_SUCCESS != status) {
 3a2:	81 11       	cpse	r24, r1
 3a4:	1d c0       	rjmp	.+58     	; 0x3e0 <SSD1306_Init+0x76>
      return status;
    }
    // Arguments
    // -----------------------------------------------------------------------------------
    arguments = pgm_read_byte (list++);
 3a6:	22 96       	adiw	r28, 0x02	; 2
 3a8:	f8 01       	movw	r30, r16
 3aa:	04 91       	lpm	r16, Z
    while (arguments--) {
 3ac:	0c c0       	rjmp	.+24     	; 0x3c6 <SSD1306_Init+0x5c>
      status = SSD1306_Send_Command (pgm_read_byte(list++));  // argument
 3ae:	7e 01       	movw	r14, r28
 3b0:	ff ef       	ldi	r31, 0xFF	; 255
 3b2:	ef 1a       	sub	r14, r31
 3b4:	ff 0a       	sbc	r15, r31
 3b6:	fe 01       	movw	r30, r28
 3b8:	84 91       	lpm	r24, Z
 3ba:	0e 94 a9 01 	call	0x352	; 0x352 <SSD1306_Send_Command>
      return status;
    }
    // Arguments
    // -----------------------------------------------------------------------------------
    arguments = pgm_read_byte (list++);
    while (arguments--) {
 3be:	01 2f       	mov	r16, r17
      status = SSD1306_Send_Command (pgm_read_byte(list++));  // argument
      if (SSD1306_SUCCESS != status) {
 3c0:	81 11       	cpse	r24, r1
 3c2:	0e c0       	rjmp	.+28     	; 0x3e0 <SSD1306_Init+0x76>
    }
    // Arguments
    // -----------------------------------------------------------------------------------
    arguments = pgm_read_byte (list++);
    while (arguments--) {
      status = SSD1306_Send_Command (pgm_read_byte(list++));  // argument
 3c4:	e7 01       	movw	r28, r14
      return status;
    }
    // Arguments
    // -----------------------------------------------------------------------------------
    arguments = pgm_read_byte (list++);
    while (arguments--) {
 3c6:	1f ef       	ldi	r17, 0xFF	; 255
 3c8:	10 0f       	add	r17, r16
 3ca:	01 11       	cpse	r16, r1
 3cc:	f0 cf       	rjmp	.-32     	; 0x3ae <SSD1306_Init+0x44>
  if (SSD1306_SUCCESS != status) {
    return status;
  }
  // Commands & Arguments
  // -------------------------------------------------------------------------------------
  while (commands--) {
 3ce:	1d 2d       	mov	r17, r13
 3d0:	dd 24       	eor	r13, r13
 3d2:	da 94       	dec	r13
 3d4:	d1 0e       	add	r13, r17
 3d6:	11 11       	cpse	r17, r1
 3d8:	dd cf       	rjmp	.-70     	; 0x394 <SSD1306_Init+0x2a>
      }
    }
  }
  // TWI: Stop
  // -------------------------------------------------------------------------------------
  TWI_Stop ();
 3da:	0e 94 be 03 	call	0x77c	; 0x77c <TWI_Stop>

  return SSD1306_SUCCESS;
 3de:	80 e0       	ldi	r24, 0x00	; 0
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	1f 91       	pop	r17
 3e6:	0f 91       	pop	r16
 3e8:	ff 90       	pop	r15
 3ea:	ef 90       	pop	r14
 3ec:	df 90       	pop	r13
 3ee:	08 95       	ret

000003f0 <SSD1306_NormalScreen>:
{
  uint8_t status = INIT_STATUS;

  // TWI: start & SLAW
  // -------------------------------------------------------------------------------------
  status = SSD1306_Send_StartAndSLAW (address);
 3f0:	0e 94 9e 01 	call	0x33c	; 0x33c <SSD1306_Send_StartAndSLAW>
  if (SSD1306_SUCCESS != status) {
 3f4:	81 11       	cpse	r24, r1
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
    return status;
  }
  // send command
  // -------------------------------------------------------------------------------------   
  status = SSD1306_Send_Command (SSD1306_DIS_NORMAL);
 3f8:	86 ea       	ldi	r24, 0xA6	; 166
 3fa:	0e 94 a9 01 	call	0x352	; 0x352 <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {
 3fe:	81 11       	cpse	r24, r1
 400:	03 c0       	rjmp	.+6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
    return status;
  }
  // TWI: Stop
  // -------------------------------------------------------------------------------------
  TWI_Stop ();
 402:	0e 94 be 03 	call	0x77c	; 0x77c <TWI_Stop>

  return SSD1306_SUCCESS;
 406:	80 e0       	ldi	r24, 0x00	; 0
}
 408:	08 95       	ret

0000040a <SSD1306_InverseScreen>:
{
  uint8_t status = INIT_STATUS;

  // TWI: start & SLAW
  // -------------------------------------------------------------------------------------
  status = SSD1306_Send_StartAndSLAW (address);
 40a:	0e 94 9e 01 	call	0x33c	; 0x33c <SSD1306_Send_StartAndSLAW>
  if (SSD1306_SUCCESS != status) {
 40e:	81 11       	cpse	r24, r1
 410:	08 c0       	rjmp	.+16     	; 0x422 <SSD1306_InverseScreen+0x18>
    return status;
  }
  // send command
  // -------------------------------------------------------------------------------------   
  status = SSD1306_Send_Command (SSD1306_DIS_INVERSE);
 412:	87 ea       	ldi	r24, 0xA7	; 167
 414:	0e 94 a9 01 	call	0x352	; 0x352 <SSD1306_Send_Command>
  if (SSD1306_SUCCESS != status) {
 418:	81 11       	cpse	r24, r1
 41a:	03 c0       	rjmp	.+6      	; 0x422 <SSD1306_InverseScreen+0x18>
    return status;
  }
  // TWI: Stop
  // -------------------------------------------------------------------------------------
  TWI_Stop ();
 41c:	0e 94 be 03 	call	0x77c	; 0x77c <TWI_Stop>

  return SSD1306_SUCCESS;
 420:	80 e0       	ldi	r24, 0x00	; 0
}
 422:	08 95       	ret

00000424 <SSD1306_UpdateScreen>:
 * @param   uint8_t address
 *
 * @return  uint8_t
 */
uint8_t SSD1306_UpdateScreen (uint8_t address)
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
  uint8_t status = INIT_STATUS;
  uint16_t i = 0;

  // TWI: start & SLAW
  // -------------------------------------------------------------------------------------
  status = SSD1306_Send_StartAndSLAW (address);
 428:	0e 94 9e 01 	call	0x33c	; 0x33c <SSD1306_Send_StartAndSLAW>
  if (SSD1306_SUCCESS != status) {
 42c:	81 11       	cpse	r24, r1
 42e:	1a c0       	rjmp	.+52     	; 0x464 <SSD1306_UpdateScreen+0x40>
    return status;
  }
  // control byte data stream
  // -------------------------------------------------------------------------------------   
  status = TWI_MT_Send_Data (SSD1306_DATA_STREAM);
 430:	80 e4       	ldi	r24, 0x40	; 64
 432:	0e 94 aa 03 	call	0x754	; 0x754 <TWI_MT_Send_Data>
  if (SSD1306_SUCCESS != status) {
 436:	81 11       	cpse	r24, r1
 438:	15 c0       	rjmp	.+42     	; 0x464 <SSD1306_UpdateScreen+0x40>
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0b c0       	rjmp	.+22     	; 0x456 <SSD1306_UpdateScreen+0x32>
    return status;
  }
  //  send cache memory lcd
  // -------------------------------------------------------------------------------------
  while (i < CACHE_SIZE_MEM) {
    status = TWI_MT_Send_Data (cacheMemLcd[i++]);                 // send data
 440:	ec 01       	movw	r28, r24
 442:	21 96       	adiw	r28, 0x01	; 1
 444:	fc 01       	movw	r30, r24
 446:	ee 5d       	subi	r30, 0xDE	; 222
 448:	fe 4f       	sbci	r31, 0xFE	; 254
 44a:	80 81       	ld	r24, Z
 44c:	0e 94 aa 03 	call	0x754	; 0x754 <TWI_MT_Send_Data>
    if (SSD1306_SUCCESS != status) {
 450:	81 11       	cpse	r24, r1
 452:	08 c0       	rjmp	.+16     	; 0x464 <SSD1306_UpdateScreen+0x40>
    return status;
  }
  //  send cache memory lcd
  // -------------------------------------------------------------------------------------
  while (i < CACHE_SIZE_MEM) {
    status = TWI_MT_Send_Data (cacheMemLcd[i++]);                 // send data
 454:	ce 01       	movw	r24, r28
  if (SSD1306_SUCCESS != status) {
    return status;
  }
  //  send cache memory lcd
  // -------------------------------------------------------------------------------------
  while (i < CACHE_SIZE_MEM) {
 456:	81 15       	cp	r24, r1
 458:	22 e0       	ldi	r18, 0x02	; 2
 45a:	92 07       	cpc	r25, r18
 45c:	88 f3       	brcs	.-30     	; 0x440 <SSD1306_UpdateScreen+0x1c>
      return status;
    }
  }
  // stop TWI
  // -------------------------------------------------------------------------------------
  TWI_Stop ();
 45e:	0e 94 be 03 	call	0x77c	; 0x77c <TWI_Stop>

  return SSD1306_SUCCESS;
 462:	80 e0       	ldi	r24, 0x00	; 0
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	08 95       	ret

0000046a <SSD1306_ClearScreen>:
 *
 * @return  void
 */
void SSD1306_ClearScreen (void)
{
  memset (cacheMemLcd, 0x00, CACHE_SIZE_MEM);                     // null cache memory lcd
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	92 e0       	ldi	r25, 0x02	; 2
 46e:	e2 e2       	ldi	r30, 0x22	; 34
 470:	f1 e0       	ldi	r31, 0x01	; 1
 472:	df 01       	movw	r26, r30
 474:	9c 01       	movw	r18, r24
 476:	1d 92       	st	X+, r1
 478:	21 50       	subi	r18, 0x01	; 1
 47a:	30 40       	sbci	r19, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <SSD1306_ClearScreen+0xc>
 47e:	08 95       	ret

00000480 <SSD1306_SetPosition>:
 *
 * @return  void
 */
void SSD1306_SetPosition (uint8_t x, uint8_t y) 
{
  _counter = x + (y << 7);                                        // update counter
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	20 e8       	ldi	r18, 0x80	; 128
 484:	62 9f       	mul	r22, r18
 486:	80 0d       	add	r24, r0
 488:	91 1d       	adc	r25, r1
 48a:	11 24       	eor	r1, r1
 48c:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <_counter+0x1>
 490:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <_counter>
 494:	08 95       	ret

00000496 <SSD1306_UpdatePosition>:
 *
 * @return  uint8_t
 */
uint8_t SSD1306_UpdatePosition (void) 
{
  uint8_t y = _counter >> 7;                                      // y / 8
 496:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <_counter>
 49a:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <_counter+0x1>
 49e:	9c 01       	movw	r18, r24
 4a0:	22 0f       	add	r18, r18
 4a2:	23 2f       	mov	r18, r19
 4a4:	22 1f       	adc	r18, r18
 4a6:	33 0b       	sbc	r19, r19
 4a8:	31 95       	neg	r19
  uint8_t x = _counter - (y << 7);                                // y % 8
 4aa:	92 2f       	mov	r25, r18
 4ac:	97 95       	ror	r25
 4ae:	99 27       	eor	r25, r25
 4b0:	97 95       	ror	r25
 4b2:	89 1b       	sub	r24, r25
  uint8_t x_new = x + CHARS_COLS_LENGTH + 1;                      // x + character length + 1
 4b4:	8a 5f       	subi	r24, 0xFA	; 250
  
  if (x_new > END_COLUMN_ADDR) {                                  // check position
 4b6:	7a f4       	brpl	.+30     	; 0x4d6 <SSD1306_UpdatePosition+0x40>
    if (y > END_PAGE_ADDR) {                                      // if more than allowable number of pages
 4b8:	24 30       	cpi	r18, 0x04	; 4
 4ba:	78 f4       	brcc	.+30     	; 0x4da <SSD1306_UpdatePosition+0x44>
      return SSD1306_ERROR;                                       // return out of range
    } else if (y < (END_PAGE_ADDR-1)) {                           // if x reach the end but page in range
 4bc:	22 30       	cpi	r18, 0x02	; 2
 4be:	78 f4       	brcc	.+30     	; 0x4de <SSD1306_UpdatePosition+0x48>
      _counter = ((++y) << 7);                                    // update
 4c0:	2f 5f       	subi	r18, 0xFF	; 255
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	28 9f       	mul	r18, r24
 4c6:	90 01       	movw	r18, r0
 4c8:	11 24       	eor	r1, r1
 4ca:	30 93 23 03 	sts	0x0323, r19	; 0x800323 <_counter+0x1>
 4ce:	20 93 22 03 	sts	0x0322, r18	; 0x800322 <_counter>
    }
  }
 
  return SSD1306_SUCCESS;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	08 95       	ret
  uint8_t x = _counter - (y << 7);                                // y % 8
  uint8_t x_new = x + CHARS_COLS_LENGTH + 1;                      // x + character length + 1
  
  if (x_new > END_COLUMN_ADDR) {                                  // check position
    if (y > END_PAGE_ADDR) {                                      // if more than allowable number of pages
      return SSD1306_ERROR;                                       // return out of range
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	08 95       	ret
    } else if (y < (END_PAGE_ADDR-1)) {                           // if x reach the end but page in range
      _counter = ((++y) << 7);                                    // update
    }
  }
 
  return SSD1306_SUCCESS;
 4de:	80 e0       	ldi	r24, 0x00	; 0
}
 4e0:	08 95       	ret

000004e2 <SSD1306_DrawChar>:
 * @param   char character
 *
 * @return  uint8_t
 */
uint8_t SSD1306_DrawChar (char character)
{
 4e2:	cf 93       	push	r28
 4e4:	c8 2f       	mov	r28, r24
  uint8_t i = 0;

  if (SSD1306_UpdatePosition () == SSD1306_ERROR) {
 4e6:	0e 94 4b 02 	call	0x496	; 0x496 <SSD1306_UpdatePosition>
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	71 f1       	breq	.+92     	; 0x54a <SSD1306_DrawChar+0x68>
 4ee:	40 e0       	ldi	r20, 0x00	; 0
 4f0:	20 c0       	rjmp	.+64     	; 0x532 <SSD1306_DrawChar+0x50>
    return SSD1306_ERROR;
  }
  while (i < CHARS_COLS_LENGTH) {
    cacheMemLcd[_counter++] = pgm_read_byte(&FONTS[character-32][i++]);
 4f2:	20 91 22 03 	lds	r18, 0x0322	; 0x800322 <_counter>
 4f6:	30 91 23 03 	lds	r19, 0x0323	; 0x800323 <_counter+0x1>
 4fa:	c9 01       	movw	r24, r18
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <_counter+0x1>
 502:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <_counter>
 506:	8c 2f       	mov	r24, r28
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	80 97       	sbiw	r24, 0x20	; 32
 50c:	51 e0       	ldi	r21, 0x01	; 1
 50e:	54 0f       	add	r21, r20
 510:	fc 01       	movw	r30, r24
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	e8 0f       	add	r30, r24
 51c:	f9 1f       	adc	r31, r25
 51e:	e4 0f       	add	r30, r20
 520:	f1 1d       	adc	r31, r1
 522:	ec 56       	subi	r30, 0x6C	; 108
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	e4 91       	lpm	r30, Z
 528:	d9 01       	movw	r26, r18
 52a:	ae 5d       	subi	r26, 0xDE	; 222
 52c:	be 4f       	sbci	r27, 0xFE	; 254
 52e:	ec 93       	st	X, r30
 530:	45 2f       	mov	r20, r21
  uint8_t i = 0;

  if (SSD1306_UpdatePosition () == SSD1306_ERROR) {
    return SSD1306_ERROR;
  }
  while (i < CHARS_COLS_LENGTH) {
 532:	45 30       	cpi	r20, 0x05	; 5
 534:	f0 f2       	brcs	.-68     	; 0x4f2 <SSD1306_DrawChar+0x10>
    cacheMemLcd[_counter++] = pgm_read_byte(&FONTS[character-32][i++]);
  }
  _counter++;
 536:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <_counter>
 53a:	90 91 23 03 	lds	r25, 0x0323	; 0x800323 <_counter+0x1>
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <_counter+0x1>
 544:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <_counter>

  return SSD1306_SUCCESS;
 548:	80 e0       	ldi	r24, 0x00	; 0
}
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <SSD1306_DrawString>:
 * @param   char * string
 *
 * @return  void
 */
void SSD1306_DrawString (char *str)
{
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	8c 01       	movw	r16, r24
  int i = 0;
 558:	c0 e0       	ldi	r28, 0x00	; 0
 55a:	d0 e0       	ldi	r29, 0x00	; 0
  while (str[i] != '\0') {
 55c:	03 c0       	rjmp	.+6      	; 0x564 <SSD1306_DrawString+0x16>
    SSD1306_DrawChar (str[i++]);
 55e:	21 96       	adiw	r28, 0x01	; 1
 560:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SSD1306_DrawChar>
 * @return  void
 */
void SSD1306_DrawString (char *str)
{
  int i = 0;
  while (str[i] != '\0') {
 564:	f8 01       	movw	r30, r16
 566:	ec 0f       	add	r30, r28
 568:	fd 1f       	adc	r31, r29
 56a:	80 81       	ld	r24, Z
 56c:	81 11       	cpse	r24, r1
 56e:	f7 cf       	rjmp	.-18     	; 0x55e <SSD1306_DrawString+0x10>
    SSD1306_DrawChar (str[i++]);
  }
}
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	1f 91       	pop	r17
 576:	0f 91       	pop	r16
 578:	08 95       	ret

0000057a <SSD1306_DrawPixel>:
uint8_t SSD1306_DrawPixel (uint8_t x, uint8_t y)
{
  uint8_t page = 0;
  uint8_t pixel = 0;
  
  if ((x > MAX_X) || (y > MAX_Y)) {                               // if out of range
 57a:	88 23       	and	r24, r24
 57c:	64 f1       	brlt	.+88     	; 0x5d6 <SSD1306_DrawPixel+0x5c>
 57e:	61 32       	cpi	r22, 0x21	; 33
 580:	60 f5       	brcc	.+88     	; 0x5da <SSD1306_DrawPixel+0x60>
    return SSD1306_ERROR;                                         // out of range
  }
  page = y >> 3;                                                  // find page (y / 8)
 582:	e6 2f       	mov	r30, r22
 584:	e6 95       	lsr	r30
 586:	e6 95       	lsr	r30
 588:	e6 95       	lsr	r30
  pixel = 1 << (y - (page << 3));                                 // which pixel (y % 8)
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	9f 01       	movw	r18, r30
 58e:	22 0f       	add	r18, r18
 590:	33 1f       	adc	r19, r19
 592:	22 0f       	add	r18, r18
 594:	33 1f       	adc	r19, r19
 596:	22 0f       	add	r18, r18
 598:	33 1f       	adc	r19, r19
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	62 1b       	sub	r22, r18
 59e:	73 0b       	sbc	r23, r19
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <SSD1306_DrawPixel+0x30>
 5a6:	22 0f       	add	r18, r18
 5a8:	33 1f       	adc	r19, r19
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <SSD1306_DrawPixel+0x2c>
  _counter = x + (page << 7);                                     // update counter
 5ae:	f6 95       	lsr	r31
 5b0:	fe 2f       	mov	r31, r30
 5b2:	ee 27       	eor	r30, r30
 5b4:	f7 95       	ror	r31
 5b6:	e7 95       	ror	r30
 5b8:	e8 0f       	add	r30, r24
 5ba:	f1 1d       	adc	r31, r1
  cacheMemLcd[_counter++] |= pixel;                               // save pixel
 5bc:	cf 01       	movw	r24, r30
 5be:	01 96       	adiw	r24, 0x01	; 1
 5c0:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <_counter+0x1>
 5c4:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <_counter>
 5c8:	ee 5d       	subi	r30, 0xDE	; 222
 5ca:	fe 4f       	sbci	r31, 0xFE	; 254
 5cc:	80 81       	ld	r24, Z
 5ce:	28 2b       	or	r18, r24
 5d0:	20 83       	st	Z, r18

  return SSD1306_SUCCESS;
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	08 95       	ret
{
  uint8_t page = 0;
  uint8_t pixel = 0;
  
  if ((x > MAX_X) || (y > MAX_Y)) {                               // if out of range
    return SSD1306_ERROR;                                         // out of range
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	08 95       	ret
 5da:	81 e0       	ldi	r24, 0x01	; 1
  pixel = 1 << (y - (page << 3));                                 // which pixel (y % 8)
  _counter = x + (page << 7);                                     // update counter
  cacheMemLcd[_counter++] |= pixel;                               // save pixel

  return SSD1306_SUCCESS;
}
 5dc:	08 95       	ret

000005de <SSD1306_DrawLine>:
 * @param   uint8_t y end position   / 0 <= rows <= MAX_Y-1
 *
 * @return  uint8_t
 */
uint8_t SSD1306_DrawLine (uint8_t x1, uint8_t x2, uint8_t y1, uint8_t y2)
{
 5de:	8f 92       	push	r8
 5e0:	9f 92       	push	r9
 5e2:	af 92       	push	r10
 5e4:	bf 92       	push	r11
 5e6:	cf 92       	push	r12
 5e8:	df 92       	push	r13
 5ea:	ef 92       	push	r14
 5ec:	ff 92       	push	r15
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	d8 2f       	mov	r29, r24
 5f8:	96 2e       	mov	r9, r22
 5fa:	c4 2f       	mov	r28, r20
 5fc:	a2 2e       	mov	r10, r18
  int16_t D;                                                      // determinant
  int16_t delta_x, delta_y;                                       // deltas
  int16_t trace_x = 1, trace_y = 1;                               // steps

  delta_x = x2 - x1;                                              // delta x
 5fe:	e6 2e       	mov	r14, r22
 600:	f1 2c       	mov	r15, r1
 602:	e8 1a       	sub	r14, r24
 604:	f1 08       	sbc	r15, r1
  delta_y = y2 - y1;                                              // delta y
 606:	c2 2e       	mov	r12, r18
 608:	d1 2c       	mov	r13, r1
 60a:	c4 1a       	sub	r12, r20
 60c:	d1 08       	sbc	r13, r1
  
  if (delta_x < 0) {                                              // check if x2 > x1
 60e:	ff 20       	and	r15, r15
 610:	34 f4       	brge	.+12     	; 0x61e <SSD1306_DrawLine+0x40>
    delta_x = -delta_x;                                           // negate delta x
 612:	f1 94       	neg	r15
 614:	e1 94       	neg	r14
 616:	f1 08       	sbc	r15, r1
    trace_x = -trace_x;                                           // negate step x
 618:	88 24       	eor	r8, r8
 61a:	8a 94       	dec	r8
 61c:	02 c0       	rjmp	.+4      	; 0x622 <SSD1306_DrawLine+0x44>
 */
uint8_t SSD1306_DrawLine (uint8_t x1, uint8_t x2, uint8_t y1, uint8_t y2)
{
  int16_t D;                                                      // determinant
  int16_t delta_x, delta_y;                                       // deltas
  int16_t trace_x = 1, trace_y = 1;                               // steps
 61e:	88 24       	eor	r8, r8
 620:	83 94       	inc	r8
  if (delta_x < 0) {                                              // check if x2 > x1
    delta_x = -delta_x;                                           // negate delta x
    trace_x = -trace_x;                                           // negate step x
  }
  
  if (delta_y < 0) {                                              // check if y2 > y1
 622:	dd 20       	and	r13, r13
 624:	34 f4       	brge	.+12     	; 0x632 <SSD1306_DrawLine+0x54>
    delta_y = -delta_y;                                           // negate detla y
 626:	d1 94       	neg	r13
 628:	c1 94       	neg	r12
 62a:	d1 08       	sbc	r13, r1
    trace_y = -trace_y;                                           // negate step y
 62c:	bb 24       	eor	r11, r11
 62e:	ba 94       	dec	r11
 630:	02 c0       	rjmp	.+4      	; 0x636 <SSD1306_DrawLine+0x58>
 */
uint8_t SSD1306_DrawLine (uint8_t x1, uint8_t x2, uint8_t y1, uint8_t y2)
{
  int16_t D;                                                      // determinant
  int16_t delta_x, delta_y;                                       // deltas
  int16_t trace_x = 1, trace_y = 1;                               // steps
 632:	bb 24       	eor	r11, r11
 634:	b3 94       	inc	r11
    trace_y = -trace_y;                                           // negate step y
  }

  // Bresenham condition for m < 1 (dy < dx)
  // -------------------------------------------------------------------------------------
  if (delta_y < delta_x) {
 636:	ce 14       	cp	r12, r14
 638:	df 04       	cpc	r13, r15
 63a:	fc f4       	brge	.+62     	; 0x67a <SSD1306_DrawLine+0x9c>
    D = (delta_y << 1) - delta_x;                                 // calculate determinant
 63c:	86 01       	movw	r16, r12
 63e:	00 0f       	add	r16, r16
 640:	11 1f       	adc	r17, r17
 642:	0e 19       	sub	r16, r14
 644:	1f 09       	sbc	r17, r15
    SSD1306_DrawPixel (x1, y1);                                   // draw first pixel
 646:	6c 2f       	mov	r22, r28
 648:	8d 2f       	mov	r24, r29
 64a:	0e 94 bd 02 	call	0x57a	; 0x57a <SSD1306_DrawPixel>
    while (x1 != x2) {                                            // check if x1 equal x2
 64e:	12 c0       	rjmp	.+36     	; 0x674 <SSD1306_DrawLine+0x96>
      x1 += trace_x;                                              // update x1
 650:	d8 0d       	add	r29, r8
      if (D >= 0) {                                               // check if determinant is positive
 652:	11 23       	and	r17, r17
 654:	34 f0       	brlt	.+12     	; 0x662 <SSD1306_DrawLine+0x84>
        y1 += trace_y;                                            // update y1
 656:	cb 0d       	add	r28, r11
        D -= 2*delta_x;                                           // update determinant
 658:	c7 01       	movw	r24, r14
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	08 1b       	sub	r16, r24
 660:	19 0b       	sbc	r17, r25
      }
      D += 2*delta_y;                                             // update deteminant
 662:	c6 01       	movw	r24, r12
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	08 0f       	add	r16, r24
 66a:	19 1f       	adc	r17, r25
      SSD1306_DrawPixel (x1, y1);                                 // draw next pixel
 66c:	6c 2f       	mov	r22, r28
 66e:	8d 2f       	mov	r24, r29
 670:	0e 94 bd 02 	call	0x57a	; 0x57a <SSD1306_DrawPixel>
  // Bresenham condition for m < 1 (dy < dx)
  // -------------------------------------------------------------------------------------
  if (delta_y < delta_x) {
    D = (delta_y << 1) - delta_x;                                 // calculate determinant
    SSD1306_DrawPixel (x1, y1);                                   // draw first pixel
    while (x1 != x2) {                                            // check if x1 equal x2
 674:	d9 11       	cpse	r29, r9
 676:	ec cf       	rjmp	.-40     	; 0x650 <SSD1306_DrawLine+0x72>
 678:	20 c0       	rjmp	.+64     	; 0x6ba <SSD1306_DrawLine+0xdc>
      SSD1306_DrawPixel (x1, y1);                                 // draw next pixel
    }
  // for m > 1 (dy > dx)    
  // -------------------------------------------------------------------------------------
  } else {
    D = delta_y - (delta_x << 1);                                 // calculate determinant
 67a:	c7 01       	movw	r24, r14
 67c:	88 0f       	add	r24, r24
 67e:	99 1f       	adc	r25, r25
 680:	86 01       	movw	r16, r12
 682:	08 1b       	sub	r16, r24
 684:	19 0b       	sbc	r17, r25
    SSD1306_DrawPixel (x1, y1);                                   // draw first pixel
 686:	6c 2f       	mov	r22, r28
 688:	8d 2f       	mov	r24, r29
 68a:	0e 94 bd 02 	call	0x57a	; 0x57a <SSD1306_DrawPixel>
    while (y1 != y2) {                                            // check if y2 equal y1
 68e:	13 c0       	rjmp	.+38     	; 0x6b6 <SSD1306_DrawLine+0xd8>
      y1 += trace_y;                                              // update y1
 690:	cb 0d       	add	r28, r11
      if (D <= 0) {                                               // check if determinant is positive
 692:	10 16       	cp	r1, r16
 694:	11 06       	cpc	r1, r17
 696:	34 f0       	brlt	.+12     	; 0x6a4 <SSD1306_DrawLine+0xc6>
        x1 += trace_x;                                            // update y1
 698:	d8 0d       	add	r29, r8
        D += 2*delta_y;                                           // update determinant
 69a:	c6 01       	movw	r24, r12
 69c:	88 0f       	add	r24, r24
 69e:	99 1f       	adc	r25, r25
 6a0:	08 0f       	add	r16, r24
 6a2:	19 1f       	adc	r17, r25
      }
      D -= 2*delta_x;                                             // update deteminant
 6a4:	c7 01       	movw	r24, r14
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	08 1b       	sub	r16, r24
 6ac:	19 0b       	sbc	r17, r25
      SSD1306_DrawPixel (x1, y1);                                 // draw next pixel
 6ae:	6c 2f       	mov	r22, r28
 6b0:	8d 2f       	mov	r24, r29
 6b2:	0e 94 bd 02 	call	0x57a	; 0x57a <SSD1306_DrawPixel>
  // for m > 1 (dy > dx)    
  // -------------------------------------------------------------------------------------
  } else {
    D = delta_y - (delta_x << 1);                                 // calculate determinant
    SSD1306_DrawPixel (x1, y1);                                   // draw first pixel
    while (y1 != y2) {                                            // check if y2 equal y1
 6b6:	ca 11       	cpse	r28, r10
 6b8:	eb cf       	rjmp	.-42     	; 0x690 <SSD1306_DrawLine+0xb2>
      SSD1306_DrawPixel (x1, y1);                                 // draw next pixel
    }
  }

  return SSD1306_SUCCESS;
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	1f 91       	pop	r17
 6c2:	0f 91       	pop	r16
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	df 90       	pop	r13
 6ca:	cf 90       	pop	r12
 6cc:	bf 90       	pop	r11
 6ce:	af 90       	pop	r10
 6d0:	9f 90       	pop	r9
 6d2:	8f 90       	pop	r8
 6d4:	08 95       	ret

000006d6 <TWI_Init>:
    // return status
    return TWI_STATUS;
  }
  // success
  return SUCCESS;
}
 6d6:	82 e0       	ldi	r24, 0x02	; 2
 6d8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 6dc:	e9 eb       	ldi	r30, 0xB9	; 185
 6de:	f0 e0       	ldi	r31, 0x00	; 0
 6e0:	80 81       	ld	r24, Z
 6e2:	90 81       	ld	r25, Z
 6e4:	82 70       	andi	r24, 0x02	; 2
 6e6:	81 60       	ori	r24, 0x01	; 1
 6e8:	89 2b       	or	r24, r25
 6ea:	80 83       	st	Z, r24
 6ec:	08 95       	ret

000006ee <TWI_MT_Start>:
 6ee:	e9 eb       	ldi	r30, 0xB9	; 185
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	87 75       	andi	r24, 0x57	; 87
 6f6:	80 83       	st	Z, r24
 6f8:	84 ea       	ldi	r24, 0xA4	; 164
 6fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 6fe:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 702:	88 23       	and	r24, r24
 704:	e4 f7       	brge	.-8      	; 0x6fe <TWI_MT_Start+0x10>
 706:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 70a:	88 7f       	andi	r24, 0xF8	; 248
 70c:	88 30       	cpi	r24, 0x08	; 8
 70e:	49 f0       	breq	.+18     	; 0x722 <TWI_MT_Start+0x34>
 710:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 714:	88 7f       	andi	r24, 0xF8	; 248
 716:	80 31       	cpi	r24, 0x10	; 16
 718:	31 f0       	breq	.+12     	; 0x726 <TWI_MT_Start+0x38>
 71a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 71e:	88 7f       	andi	r24, 0xF8	; 248
 720:	08 95       	ret
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	08 95       	ret
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	08 95       	ret

0000072a <TWI_MT_Send_SLAW>:
 72a:	88 0f       	add	r24, r24
 72c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 730:	84 e8       	ldi	r24, 0x84	; 132
 732:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 736:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 73a:	88 23       	and	r24, r24
 73c:	e4 f7       	brge	.-8      	; 0x736 <TWI_MT_Send_SLAW+0xc>
 73e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 742:	88 7f       	andi	r24, 0xF8	; 248
 744:	88 31       	cpi	r24, 0x18	; 24
 746:	21 f0       	breq	.+8      	; 0x750 <TWI_MT_Send_SLAW+0x26>
 748:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 74c:	88 7f       	andi	r24, 0xF8	; 248
 74e:	08 95       	ret
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	08 95       	ret

00000754 <TWI_MT_Send_Data>:
 754:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 758:	84 e8       	ldi	r24, 0x84	; 132
 75a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 75e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 762:	88 23       	and	r24, r24
 764:	e4 f7       	brge	.-8      	; 0x75e <TWI_MT_Send_Data+0xa>
 766:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 76a:	88 7f       	andi	r24, 0xF8	; 248
 76c:	88 32       	cpi	r24, 0x28	; 40
 76e:	21 f0       	breq	.+8      	; 0x778 <TWI_MT_Send_Data+0x24>
 770:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 774:	88 7f       	andi	r24, 0xF8	; 248
 776:	08 95       	ret
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	08 95       	ret

0000077c <TWI_Stop>:
void TWI_Stop (void)
{
  // End TWI
  // -------------------------------------------------------------------------------------
  // send stop sequence
  TWI_STOP ();
 77c:	84 e9       	ldi	r24, 0x94	; 148
 77e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
